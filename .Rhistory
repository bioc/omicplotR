conds <- c(rep("A", 15), rep("O", 15))
f.x <- aldex.clr(f, conds)
x.phi <- codaSeq.phi(f.x)
f.x <- aldex.clr(f)
x.phi <- codaSeq.propr.aldex.phi(f.x)
codaSeq.propr.aldex.phi(f.x)
x.phi <- codaSeq.propr.aldex.phi(f.x)
x.phi
phi.cutoff <- .2
x.lo.phi <- subset(x.phi, phi <= phi.cutoff)
# generate a graphical object
#directed must be false, otherwise they would be dependent.
g <- graph.data.frame(x.lo.phi, directed=FALSE)
# overview of all the proportional relationships
# this can take a long time!!!
# this is not R syntax, but its inside igraph.
V(g)$label.cex <- 1
OTU.names <- V(g)$name
V(g)$name <- as.character(hmpgenera[V(g)$name, "genus"])
plot(g, layout=layout.fruchterman.reingold.grid(g, weight=0.05/E(g)$phi), vertex.size=1, vertex.color="black")
phi.cutoff <- .3
x.lo.phi <- subset(x.phi, phi <= phi.cutoff)
# generate a graphical object
#directed must be false, otherwise they would be dependent.
g <- graph.data.frame(x.lo.phi, directed=FALSE)
# overview of all the proportional relationships
# this can take a long time!!!
# this is not R syntax, but its inside igraph.
V(g)$label.cex <- 1
OTU.names <- V(g)$name
V(g)$name <- as.character(hmpgenera[V(g)$name, "genus"])
plot(g, layout=layout.fruchterman.reingold.grid(g, weight=0.05/E(g)$phi), vertex.size=1, vertex.color="black")
phi.cutoff <- .3
x.lo.phi <- subset(x.phi, phi <= phi.cutoff)
# generate a graphical object
#directed must be false, otherwise they would be dependent.
g <- graph.data.frame(x.lo.phi, directed=FALSE)
# overview of all the proportional relationships
# this can take a long time!!!
# this is not R syntax, but its inside igraph.
V(g)$label.cex <- 1
OTU.names <- V(g)$name
V(g)$name <- as.character(hmpgenera[V(g)$name, "genus"])
plot(g, layout=layout.fruchterman.reingold.grid(g, weight=0.05/E(g)$phi), vertex.size=1, vertex.color="black")
phi.cutoff <- .3
x.lo.phi <- subset(x.phi, phi <= phi.cutoff)
# generate a graphical object
#directed must be false, otherwise they would be dependent.
g <- graph.data.frame(x.lo.phi, directed=FALSE)
# overview of all the proportional relationships
# this can take a long time!!!
# this is not R syntax, but its inside igraph.
V(g)$label.cex <- 1
OTU.names <- V(g)$name
V(g)$name <- as.character(hmpgenera[V(g)$name, "genus"])
plot(g, layout=layout.fruchterman.reingold.grid(g, weight=0.05/E(g)$phi), vertex.size=1, vertex.color="black")
phi.cutoff <- .3
x.lo.phi <- subset(x.phi, phi <= phi.cutoff)
# generate a graphical object
#directed must be false, otherwise they would be dependent.
g <- graph.data.frame(x.lo.phi, directed=FALSE)
# overview of all the proportional relationships
# this can take a long time!!!
# this is not R syntax, but its inside igraph.
V(g)$label.cex <- 1
OTU.names <- V(g)$name
V(g)$name <- as.character(hmpgenera[V(g)$name, "genus"])
plot(g, layout=layout.fruchterman.reingold.grid(g, weight=0.05/E(g)$phi), vertex.size=1, vertex.color="black")
layout <-layout.fruchterman.reingold(g)
plot(g, layout=layout)
plot(g, layout=layout,
vertex.size=map(betweenness(g),c(1,15)),
edge.width=map(edge.betweenness(g), c(1,10)))
pr <- page.rank(g)$vector
plot(g, layout=layout, vertex.size=map(pr, c(1,20)), edge.arrow.size=.2)
dg <- decompose.graph(g)
plot(dg[[1]],layout=layout.fruchterman.reingold(dg[[1]]),
vertex.size=map(page.rank(dg[[1]])$vector, c(1,10)),
edge.arrow.size=.2)
c3 = cluster_edge_betweenness(g)
plot(g, vertex.color=membership(c3), layout=layout_with_fr(g), vertex.size=map(page.rank(g)$vector, c(1,20)), edge.arrow.size=.2)
c2 = cluster_leading_eigen(g)
plot(g, vertex.color=membership(c2), layout=layout_with_fr(g), vertex.size=map(pr, c(1,20)), edge.arrow.size=.2)
c1 = cluster_fast_greedy(dg[[1]])
plot(dg[[1]], vertex.color=membership(c1), layout=layout_with_fr(dg[[1]]))
rnorm(113)
rnorm(113, 9)
library(shiny); print(source('Western University/Gloor Lab/Code/shinyApp/shinyAppUploadDocument.R')$value)
?selex
library(shiny); print(source('Western University/Gloor Lab/Code/shinyApp/shinyAppUploadDocument.R')$value)
library(shiny); print(source('Western University/Gloor Lab/Code/shinyApp/shinyAppUploadDocument.R')$value)
?aldex.stripchart
library(ALDEx2)
?stripchart
?shiny
print(source('Western University/Gloor Lab/Code/shinyApp/shinyAppUploadDocument.R')$value)
?splitLayout
print(source('Western University/Gloor Lab/Code/shinyApp/shinyAppUploadDocument.R')$value)
print(source('Western University/Gloor Lab/Code/shinyApp/shinyAppUploadDocument.R')$value)
shiny::runApp('GitHub/omicplotR')
shiny::runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runGitHub("dgiguer/omicplotr")
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runGitHub("dgiguer/omicplotr")
shiny::runApp('GitHub/omicplotR')
library(propr)
?propr
remove.packages("markdown")
library(markdown)
remove.packages("propr")
library(propr)
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
devtools::install_github("tpq/propr")
library(devtools)
devtools::install_github("tpq/propr")
library(propr)
library(devtools)
devtools::install_github("tpq/propr")
R.version()
R.Version()
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
library(shiny)
runGitHub("dgiguer/omicplotr")
shiny::runApp('GitHub/omicplotR')
runGitHub("dgiguer/omicplotr")
shiny::runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
Q
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
class(g2s)
condish
runApp('GitHub/omicplotR')
class(g2)
class(g2s)
runApp()
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
Q
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
library(shiny)
runGitHub("dgiguer/omicplotr")
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
library(shiny)
runGitHub("dgiguer/omicplotr")
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
method <- c("complete", "single", "ward.d2")
method[2]
num <- 2
method[num]
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
library(shiny)
runGitHub("dgiguer/omicplotr")
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runGitHub("dgiguer/omicplotr")
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp()
Q
Q
Q
runApp('GitHub/omicplotR')
ranges
shiny::runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
devtools::install_github("tpq/ALDEx2")
library(ALDEx2)
?aldex
warnings()
shiny::runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
shiny::runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
View(output)
rownames(output)
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
Q
shiny::runApp(list(
ui = bootstrapPage(
tabsetPanel(id = "tabSelected",
tabPanel("Tab1", uiOutput("Tab1")),
tabPanel("Tab2", uiOutput("Tab2"))
)
),
server = function(input, output,session) {
output$Tab1 <- renderUI({
tabsetPanel(id = "subTabPanel1",
tabPanel("subTab11"),
tabPanel("subTab12")
)
})
output$Tab2 <- renderUI({
tabsetPanel(id = "subTabPanel2",
tabPanel("subTab21"),
tabPanel("subTab22")
)
})
}
)
}
shiny::runApp(list(
ui = bootstrapPage(
tabsetPanel(id = "tabSelected",
tabPanel("Tab1", uiOutput("Tab1")),
tabPanel("Tab2", uiOutput("Tab2"))
)
),
server = function(input, output,session) {
output$Tab1 <- renderUI({
tabsetPanel(id = "subTabPanel1",
tabPanel("subTab11"),
tabPanel("subTab12")
)
})
output$Tab2 <- renderUI({
tabsetPanel(id = "subTabPanel2",
tabPanel("subTab21"),
tabPanel("subTab22")
)
})
}
))
runApp('GitHub/omicplotR')
Q
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp()
Q
Q
runApp('GitHub/omicplotR')
shiny::runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
shiny::runGitHub("dgiguer/omicplotr")
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
shiny::runGitHub("dgiguer/omicplotr")
runApp('GitHub/omicplotR')
library(shiny)
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
shiny::runGitHub("dgiguer/omicplotr")
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
shiny::runGitHub("dgiguer/omicplotr")
shiny::runGitHub("dgiguer/omicplotr")
runApp('GitHub/omicplotR')
t <- c(5, 10, 9, 4)
s <- c(10, 1, 5, 6)
barplot(t)
barplot(as.matrix(t))
plot.new()
par(fig=c(0,1,0,1), mar = c(5.1, 2.0, 4.1, 0), oma = c(0,0,0,0), new=TRUE)
par(fig=c(0, 0.1, 0, 1), new=TRUE)
barplot(as.matrix(t))
par(fig=c(0.1, 0.2, 0, 1), mar = c(5.1, 0, 4.1, 0), new = TRUE)
barplot(as.matrix(s))
plot.new()
par(fig=c(0,1,0,1), mar = c(5.1, 2.0, 4.1, 0), oma = c(0,0,0,0), new=TRUE)
par(fig=c(0, 0.1, 0, 1), new=TRUE)
barplot(as.matrix(`col_ A_S3_L001_bp.txt`$`%`), col = `col_ A_S3_L001_bp.txt`$col, ylim = c(0, 100), space = 0)
barplot(as.matrix(t))
barplot(as.matrix(t), axes = FALSE, space = 0)
plot.new()
par(fig=c(0,1,0,1), mar = c(5.1, 2.0, 4.1, 0), oma = c(0,0,0,0), new=TRUE)
par(fig=c(0, 0.1, 0, 1), new=TRUE)
barplot(as.matrix(t), axes = FALSE, space = 0)
par(fig=c(0.1, 0.2, 0, 1), mar = c(5.1, 0, 4.1, 0), new = TRUE)
barplot(as.matrix(s), axes = FALSE, space = 0)
plot.new()
par(fig=c(0,1,0,1), mar = c(5.1, 2.0, 4.1, 0), oma = c(0,0,0,0), new=TRUE)
par(fig=c(0, 0.1, 0, 1), new=TRUE)
barplot(as.matrix(s), axes = FALSE, space = 0, beside=T)
par(fig=c(0.1, 0.2, 0, 1), mar = c(5.1, 0, 4.1, 0), new = TRUE)
barplot(as.matrix(t), axes = FALSE, space = 0, beside=T)
plot.new()
par(fig=c(0,1,0,1), mar = c(5.1, 2.0, 4.1, 0), oma = c(0,0,0,0), new=TRUE, xpd=TRUE)
par(fig=c(0, 0.1, 0, 1), new=TRUE)
barplot(as.matrix(t), axes = FALSE, space = 0, beside=T)
par(fig=c(0.1, 0.2, 0, 1), mar = c(5.1, 0, 4.1, 0), new = TRUE)
barplot(as.matrix(s), axes = FALSE, space = 0, beside=T)
plot.new()
par(fig=c(0,1,0,1), mar = c(5.1, 2.0, 4.1, 0), new=TRUE, xpd=TRUE)
par(fig=c(0, 0.1, 0, 1), new=TRUE)
barplot(as.matrix(s), axes = FALSE, space = 0, beside=T)
par(fig=c(0.1, 0.2, 0, 1), mar = c(5.1, 0, 4.1, 0), new = TRUE)
barplot(as.matrix(t), axes = FALSE, space = 0, beside=T)
barplot(as.matrix(t), axes = FALSE, space = 0)
par(fig=c(0, 0.1, 0, 1), new=TRUE)
barplot(as.matrix(s), axes = FALSE, space = 0)
plot.new()
par(fig=c(0,1,0,1), mar = c(5.1, 2.0, 4.1, 0), new=TRUE, xpd=TRUE)
par(fig=c(0, 0.1, 0, 1), new=TRUE)
barplot(as.matrix(s), axes = FALSE, space = c(0, 0))
par(fig=c(0.1, 0.2, 0, 1), mar = c(5.1, 0, 4.1, 0), new = TRUE)
barplot(as.matrix(t), axes = FALSE, space = c(0, 0))
plot.new()
par(fig=c(0,1,0,1), mar = c(5.1, 2.0, 4.1, 0), oma = c(0,0,0,0), new=TRUE, xpd=TRUE)
par(fig=c(0, 0.1, 0, 1), new=TRUE)
barplot(as.matrix(t), axes = FALSE, space = c(0, 0))
par(fig=c(0.1, 0.2, 0, 1), mar = c(5.1, 0, 4.1, 0), new = TRUE)
barplot(as.matrix(s), axes = FALSE, space = c(0, 0))
shiny::runGitHub("dgiguer/omicplotr")
shiny::runGitHub("dgiguer/omicplotr")
runApp('GitHub/omicplotR')
shiny::runGitHub("dgiguer/omicplotr")
runApp('GitHub/omicplotR')
library(CoDaSeq)
?codaSeq.filter
data("ak_op")
View(ak_op)
shiny::runGitHub("dgiguer/omicplotr")
library(DESeq)
?DEseq
shiny::runGitHub("dgiguer/omicplotr")
citation(R)
citation("R")
citation()
citation("ALDEx2")
citation("propr")
citation("iGraph")
citation("igraph")
?hclust
?dist
shiny::runApp('GitHub/omicplotR')
shiny::runApp('GitHub/omicplotR')
runApp('GitHub/omicplotR')
shiny::runGitHub("dgiguer/omicplotr")
source("https://bioconductor.org/biocLite.R")
biocLite()
?biocLite
setwd("~/GitHub/omicplotR_pkg")
library(devtools)
build()
check()
roxygen2::roxygenise()
build()
check()
